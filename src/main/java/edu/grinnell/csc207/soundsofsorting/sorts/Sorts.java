package edu.grinnell.csc207.soundsofsorting.sorts;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import java.util.ArrayList;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {

    /**
     * Swaps indices <code>i</code> and <code>j</code> of array
     * <code>arr</code>.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i   the first index to swap
     * @param j   the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * 
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        List<SortEvent<Integer>> ret = new ArrayList<>();
        for (int iter = arr.length - 1; iter >= 0; iter--) {
            for (int iter2 = 0; iter2 < iter; iter2++) {
                ret.add(new CompareEvent<>(iter2, iter2 + 1));
                if (arr[iter2].compareTo(arr[iter2 + 1]) > 0) {
                    ret.add(new SwapEvent<>(iter2, iter2 + 1));
                    swap(arr, iter2, iter2 + 1);
                }
            }
        }
        return ret;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * 
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
        List<SortEvent<Integer>> ret = new ArrayList<>();
        for (int iter = 0; iter < arr.length - 1; iter++) {
            int lowestIndex = iter;
            for (int iter2 = iter; iter2 < arr.length; iter2++) {
                ret.add(new CompareEvent<>(iter2, lowestIndex));
                if (arr[iter2].compareTo(arr[lowestIndex]) < 0) {
                    lowestIndex = iter2;
                }
            }
            ret.add(new SwapEvent<>(iter, lowestIndex));
            swap(arr, iter, lowestIndex);
        }
        return ret;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * 
     * <pre>
     * [ i elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        int n = arr.length;
        for (int iter = 1; iter < n; iter++) {
            T insertIt = arr[iter];
            int iter2 = iter - 1;
            while (iter2 >= 0 && arr[iter2].compareTo(insertIt) > 0) {
                events.add(new CompareEvent<>(iter2, iter2 + 1));
                events.add(new CopyEvent<Integer>(iter2 + 1, (Integer) arr[iter2]));
                arr[iter2 + 1] = arr[iter2];
                iter2--;
            }
            events.add(new CopyEvent<Integer>(iter2 + 1, (Integer) insertIt));
            arr[iter2 + 1] = insertIt;
        }
        return events;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(
            T[] arr) {
        List<SortEvent<Integer>> ret = new ArrayList<>();
        mergeSortH(arr, 0, arr.length, ret);
        return ret;
    }

    /**
     * Helper function for merge sort
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param lo  upper bound(exclusive)
     * @param hi  lower bound(inclusive)
     * @param ret the sort events generated by this sort
     */
    private static <T extends Comparable<? super T>> void mergeSortH(T[] arr, int lo, int hi,
            List<SortEvent<Integer>> ret) {
        int mid = (lo + hi) / 2;
        if ((hi - lo) <= 1) {
            return;
        }
        mergeSortH(arr, lo, mid, ret);
        mergeSortH(arr, mid, hi, ret);
        List<T> helperarr = new ArrayList<>();
        int iter = lo;
        int iter2 = mid;
        for (; iter < mid; iter++) {
            while (iter2 < hi && (arr[iter].compareTo(arr[iter2]) > 0)) {
                ret.add(new CompareEvent<>(iter, iter2));
                helperarr.add(arr[iter2]);
                iter2++;
            }
            helperarr.add(arr[iter]);
        }
        while (iter2 < hi) {
            helperarr.add(arr[iter2]);
            iter2++;
        }
        for (int iter3 = 0; iter3 < (hi - lo); iter3++) {
            ret.add(new CopyEvent<>(lo + iter3, (Integer) helperarr.get(iter3)));
            arr[lo + iter3] = helperarr.get(iter3);
        }

    }

    /**
     * Sorts the array according to the quick sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        List<SortEvent<Integer>> ret = new ArrayList<>();
        quickSortH(arr, 0, arr.length, ret);
        return ret;
    }

    /**
     * Helper function for quick sort
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param lo  upper bound(exclusive)
     * @param hi  lower bound(inclusive)
     * @param ret the sort events generated by this sort
     */
    private static <T extends Comparable<? super T>> void quickSortH(T[] arr, int lo, int hi,
            List<SortEvent<Integer>> ret) {
        if ((hi - lo) <= 1) {
            return;
        }
        int midpos = (lo + hi) / 2;
        T mid = arr[midpos];
        T loval = arr[lo];
        T hival = arr[hi - 1];
        int pivotpos = midpos;
        T pivot = mid;
        ret.add(new CompareEvent<>(hi - 1, midpos));
        if (hival.compareTo(mid) > 0) {
            ret.add(new CompareEvent<>(midpos, lo));
            if (mid.compareTo(loval) > 0) {
                pivot = mid;
                pivotpos = midpos;
            } else {
                ret.add(new CompareEvent<>(hi - 1, lo));
                if (hival.compareTo(loval) > 0) {
                    pivot = loval;
                    pivotpos = lo;
                } else {
                    pivot = hival;
                    pivotpos = hi - 1;
                }
            }
        } else {
            ret.add(new CompareEvent<>(hi - 1, lo));
            if (hival.compareTo(loval) > 0) {
                pivot = hival;
                pivotpos = hi - 1;
            } else {
                ret.add(new CompareEvent<>(midpos, lo));
                if (mid.compareTo(loval) > 0) {
                    pivot = loval;
                    pivotpos = lo;
                } else {
                    pivot = mid;
                    pivotpos = midpos;
                }
            }
        }

        ret.add(new SwapEvent<>(pivotpos, (hi - 1)));
        swap(arr, pivotpos, (hi - 1));
        int loPointer = lo;
        int hiPointer = hi - 2;

        while (loPointer < hiPointer) {
            ret.add(new CompareEvent<>(loPointer, hi - 1));
            if (arr[loPointer].compareTo(pivot) > 0) {
                while ((loPointer < hiPointer) && arr[hiPointer].compareTo(pivot) > 0) {
                    ret.add(new CompareEvent<>(loPointer, hi - 1));
                    hiPointer--;
                }
                ret.add(new SwapEvent<>(loPointer, hiPointer));
                swap(arr, loPointer, hiPointer);
            }
            if (loPointer != hiPointer) {
                loPointer++;
            }
        }
        ret.add(new CompareEvent<>(loPointer, hi - 1));
        if (arr[loPointer].compareTo(pivot) > 0) {
            ret.add(new SwapEvent<>(loPointer, hi - 1));
            swap(arr, loPointer, hi - 1);
        } else {
            ret.add(new SwapEvent<>(loPointer + 1, hi - 1));
            swap(arr, loPointer + 1, hi - 1);
        }

        quickSortH(arr, lo, loPointer, ret);
        quickSortH(arr, loPointer + 1, hi, ret);

    }

    /**
     * Sort the list in a certain way (Inefficient)
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mySort(T[] arr) {
        List<SortEvent<Integer>> ret = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = i; j < arr.length; j++) {
                ret.add(new CompareEvent<>(i, j));
                if (arr[i].compareTo(arr[j]) > 0) {
                    ret.add(new SwapEvent<>(i, j));
                    swap(arr, i, j);
                }
            }
        }
        return ret;
    }

    /**
     * Apply the sort events to the array
     * 
     * @param <T>    the carrier type of the array
     * @param l      the array to sort
     * @param events sort events that would be applied to array l
     */
    public static <T extends Comparable<? super T>> void eventSort(T[] l,
            List<SortEvent<T>> events) {
        for (int iter = 0; iter < events.size(); iter++) {
            events.get(iter).apply(l);
        }
    }

}
